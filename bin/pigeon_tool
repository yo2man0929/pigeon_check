#!/usr/local/bin/perl
use warnings;
use strict;
use Getopt::Long;
use LWP::UserAgent;
use Data::Dumper;
use JSON;

my $yca_role = "$(yca_role)";
my $property_name = "$(property_name)";

my @all_property = qw /
   AdpostTW
   AuctionsHK
   AuctionsTW
   BillingTW
   Datamining-windows
   DataMiningTW
   DealsHK
   ECCentralTech
   NevecTW
   ShoppingMall
   Shoppingmall-windows
   Store-TW
/;

my %tc = (
    dk_red      => "\e[1;31m",
    dk_green    => "\e[1;32m",
    green       => "\e[38;5;46m",
    white       => "\e[0;37m",
    blue        => "\e[38;5;123m",
    start       => "\e[1;41m",
    start       => "\e[1;41m",
    end         => "\e[0m",
    yellow      => "\e[38;5;227m",
);

sub get_pigeon_endpoint(){
    my @pigeon_tail;
    my $url = "https://edge.dist.yahoo.com:4443/roles/v1/roles/nevec_egs_pigeon.HOSTs.prod/members?output=json" ;
    my $ua  = LWP::UserAgent->new;
    my $response = $ua ->get($url);
    if ($response->is_success){
        $response = $response->content;
        my $status = from_json($response);
        foreach my $sub (@$status){
        @pigeon_tail = grep /tail/ , @{$sub->{'members'}} ;
        }
    return @pigeon_tail;
    }
}

sub skip_pigeon($$$){
    my $target_host     = shift;
    my $queue_name      = shift;
    my $queue_id        = shift;
    my $yca_value       = `/home/y/bin/yca-cert-util --show $yca_role | cut -d ' ' -f 2`; chomp $yca_value;
    my $SERVICE_URL     = "http://$target_host:4080";
    my $ua  = LWP::UserAgent->new;
    my $url = "$SERVICE_URL/api/pigeon/v1/messages/skip/$queue_name?msgId=$queue_id" ;
    my @headers = (
        'Content-Type'   => "text/plain",
        'Accept'         => 'application/json',
        'Yahoo-App-Auth' => $yca_value, ) ;
    my $response = $ua->put( $url ,@headers);
    if ($response->is_success) {
        $response = $response->content;
        print $tc{green} . Dumper( from_json($response)) . $tc{end} ;
     }else {
        print "Fail to skip, check yca setting or network setting\n"
     }
}

sub show_queue(){
    my $target_host     = shift;
    my $property_name   = shift;
    my $splunk          = shift;
    my $yca_value       = `/home/y/bin/yca-cert-util --show $yca_role | cut -d ' ' -f 2`; chomp $yca_value;
    my $SERVICE_URL     = "http://$target_host:4080";

    my $ua  = LWP::UserAgent->new;
    my $url = "$SERVICE_URL/api/pigeon/v1/status?" ;
    my @headers = (
        'Content-Type'   => "text/plain",
        'Accept'         => 'application/json',
        'Yahoo-App-Auth' => $yca_value, ) ;
    $ua->timeout(10);
    my $response = $ua ->get($url,@headers);
    if ($response->is_success) {
        $response = $response->content;
        my $status = from_json($response);
        foreach my $sub (@{$status->{"pigeonStatus"}->{"subscriptions"}}) {
            my $messageDelayedSeconds = $sub->{"messageDelayedSeconds"};
            my $oldMessageCount       = $sub->{"oldMessageCount"};
            my $subscriptionName      = $sub->{"subscriptionName"};
            my $topicName             = $sub->{"topicName"};
            my $oldMessages           = $sub->{"oldMessages"};
            my $property              = $sub->{"property"};
            if ( $oldMessageCount > 0 ) {
                if ($property eq $property_name ) {
                    print "$tc{blue}$target_host $property Topic:$topicName\n$tc{end}";
                    print "Subscription:$tc{dk_red}$subscriptionName$tc{end} delay $messageDelayedSeconds seconds, OldMessagesCount: $oldMessageCount\n";
                    print "$tc{yellow}oldMessages list=>\n";
                    print  "=" x 80 . "\n" . "$tc{end}";
                    foreach (@$oldMessages) {
                        print $tc{dk_red} . $_ . $tc{end} . "\n";
                        if ($splunk == 1 ){
                            $_ =~ s/([^_]+)__\w+/$1/ ;
                            print "https://splunk.nevec.yahoo.com:9999/en-US/app/search/search?q=search%20index%3D%20nevec-pigeon-headtocms_log%20topic%3D" . $topicName . "%20msgId%3D" . $_ . "&display.page.search.mode=smart&dispatch.sample_ratio=1&earliest=-7d%40h&lates\n";
                        }
                    }
                    print "$tc{yellow}" . "=" x 80 . "\n" . "$tc{end}";
                }
            }
        }
    } else {
        print "API connection failed or your setting is wrong"
    }
}

sub error_exit {
    if (@_) {
        print STDERR "[Error] @_\n";
    }
    exit(255)
}

sub run() {
    my %args = ();
    GetOptions (\%args,
        "list|l",
        "all|a",
        "skip|k",
        "help|h",
        "queue|q=s" ,
        "message|m=s" ,
        "url|u",
    ) or error_exit();

    if ($args{help}) {
        help();
    }
    elsif ($args{list} && not $args{all} && not $args{skip} ) {
        foreach my $host (&get_pigeon_endpoint) {
            if ($args{url}) {
                &show_queue($host, $property_name, 1)
            }else {
                &show_queue($host, $property_name, 0)
            }
        }
    }
    elsif ($args{list} && $args{all} && not $args{skip})  {
        foreach my $host (&get_pigeon_endpoint) {
            foreach my $property (@all_property) {
                if ($args{url}) {
                    &show_queue($host, $property, 1)
                }else {
                    &show_queue($host, $property, 0)
                }
            }
        }
    }
    elsif ($args{skip} && $args{queue} && $args{message} && not $args{list} ) {
        foreach my $host (&get_pigeon_endpoint){
            &skip_pigeon($host, $args{queue},$args{message})
        }
    }
    else {
         error_exit();
    }
}

sub help() {
print <<EOF

Usage:
       $0 [-l][-a]
       $0 [-k -q queue_name -m message_id]
       $0 [-h]
Options:
    -h, --help
        Print detailed help screen
    -l, --list
        List old message from your property.   Eg: $0 -l
        List old message from all propertye.   Eg: $0 -l -a
    -k, --skip
        Skip the certain queue, you also have to use -q and -m for queue_name and message_id
        Eg: $0 -k -q CQI.prod.storeeps.set.action::CQO.prod.storeeps.set.action.search.merlin -m d925d129-e4e7-4602-bba4-124bf462bc5c__08959ef907109ef601

EOF
}
&run() ;
